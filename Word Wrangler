"""
Student code for Word Wrangler game
"""

import urllib2
import codeskulptor
import poc_wrangler_provided as provided

codeskulptor.set_timeout(50)
WORDFILE = "assets_scrabble_words3.txt"


# Functions to manipulate ordered word lists

def remove_duplicates(list1):
    """
    Eliminate duplicates in a sorted list.

    Returns a new sorted list with the same elements in list1, but
    with no duplicates.

    This function can be iterative.
    """
    lst = list(set(list1))
    lst.sort()
    return lst
def intersect(list1, list2):
    """
    Compute the intersection of two sorted lists.

    Returns a new sorted list containing only elements that are in
    both list1 and list2.

    This function can be iterative.
    """
    if len(list1) < len(list2):
        return [item for item in list1 if binarySearch(list2, item)]
    else:
        return [item for item in list2 if binarySearch(list1, item)]
    
def binarySearch(alist, item):
    first = 0
    last = len(alist)-1
    found = False
    
    while first<=last and not found:
        midpoint = (first + last)//2
        if alist[midpoint] == item:
            found = True
        else:
            if item < alist[midpoint]:
                last = midpoint-1
            else:
                first = midpoint+1
    
    return found

# Functions to perform merge sort

def merge(list1, list2):
    """
    Merge two sorted lists.

    Returns a new sorted list containing all of the elements that
    are in either list1 and list2.

    This function can be iterative.
    """   
    result = []
    while len(list1) >0 and len(list2) >0:
        if list1 [0] > list2 [0]:
            result.append(list2[0])
            list2 = list2[1:]
        else:
            result.append(list1[0])
            list1 = list1[1:]
    if len(list1) > 0:
        result += list1
    if len(list2) > 0:
        result += list2
    return result
                
def merge_sort(lst):
    """
    Sort the elements of list1.

    Return a new sorted list with the same elements as list1.

    This function should be recursive.
    """
    if len(lst) <= 1:
        return lst
 
    middle = int(len(lst) / 2)
    left = merge_sort(lst[:middle])
    right = merge_sort(lst[middle:])
    return merge(left, right)

# Function to generate all strings for the word wrangler game

def gen_all_strings(word):
    """
    Generate all strings that can be composed from the letters in word
    in any order.

    Returns a list of all strings that can be formed from the letters
    in word.

    This function should be recursive.
    """
    all_string = []
    if len(word) == 0:
        all_string.append('')
        return all_string
    if len(word) == 1:
        all_string.append('')
        all_string.append(word)
        return all_string
    first = word[0]
    rest = word[1:]
    
    rest_strings = gen_all_strings(rest)
    for idx in range(len(rest_strings)):
        all_string.append(rest_strings[idx])
        for pos in range(len(rest_strings[idx]) + 1):
            all_string.append(rest_strings[idx][0:pos] + first + rest_strings[idx][pos:len(rest_strings[idx]) + 1])
    return all_string

# Function to load words from a file

def load_words(filename):
    """
    Load word list from the file named filename.

    Returns a list of strings.
    """
    output = []
    flie = urllib2.urlopen("http://codeskulptor-assets.commondatastorage.googleapis.com/assets_scrabble_words3.txt")
    for line in flie:
        #print line
        output.append(line[:-1])
    return output

def run():
    """
    Run game.
    """
    words = load_words(WORDFILE)
    wrangler = provided.WordWrangler(words, remove_duplicates, 
                                     intersect, merge_sort, 
                                     gen_all_strings)
    provided.run_game(wrangler)

# Uncomment when you are ready to try the game
run()
